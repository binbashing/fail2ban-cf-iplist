#!/bin/sh
####
# Script to add or remove IP addresses from a Cloudflare IP List
###
# This script requires the following environment variables:
# - CF_API_TOKEN: Cloudflare API Token with the following permissions:
#   - Account:Account Filter Lists:Edit
#   - Account:Account Filter Lists:Read
#   - Account:Account Settings: Read

set -e

# Function to display usage
usage() {
    echo "Usage: $0 -l <list> -a <action> -i <ip>"
    echo
    echo "Options:"
    echo "  -l <list>     name of the IP list."
    echo "  -a <action>   action of operation. Can be 'add' or 'remove'."
    echo "  -i <ip>       IP address to add or remove."
    echo
    echo "Example:"
    echo "  $0 -l my_blocklist -a add -i 192.0.2.0"
    exit 1
}

# Function to validate an IP
validate_ip() {
    # Regular expression for IPv4
    _ipv4_regex="^([0-9]{1,3}\.){3}[0-9]{1,3}$"
    # Regular expression for IPv6
    _ipv6_regex="^([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}$"
    # Check if IP matches either regular expression
    if echo "$1" | grep -Eq "${_ipv4_regex}" || echo "$1" | grep -Eq "${_ipv6_regex}"; then
        return 0
    else
        return 1
    fi
}

# Function to make a GET request and handle errors
make_get_request() {
    url=$1

    # Make GET request
    response=$(curl -s -w "\n%{http_code}" -X GET "$url" \
      -H "Authorization: Bearer ${CF_API_TOKEN}" \
      -H "Content-Type: application/json")
    
    # Handle failures
    http_code=$(echo "$response" | tail -n1)
    response_body=$(echo "$response" | sed '$ d')
    if [ "$http_code" -ne 200 ]; then
        echo "Error: GET request to $url failed with status code $http_code"
        echo "Response: $response_body"
        exit 1
    fi

    # Return response body
    echo "$response_body"
}

# Function to get account ID
set_account_id() {
    url="https://api.cloudflare.com/client/v4/accounts"
    response=$(curl -s -X GET "${url}" \
      -H "Authorization: Bearer ${CF_API_TOKEN}" \
      -H "Content-Type: application/json")
   
    # Set account ID
    account_id=$(echo "$response" | jq -r '.result[0].id')

    # Check if account ID is empty
    if [ -z "$account_id" ]; then
        echo "Error: Failed to get account ID."
        exit 1
    fi
}

# Function to set list
set_list_id() {
    account_id=$1
    url="https://api.cloudflare.com/client/v4/accounts/${account_id}/rules/lists"
    response=$(curl -s -X GET "${url}" \
      -H "Authorization: Bearer ${CF_API_TOKEN}" \
      -H "Content-Type: application/json")

    # Set list ID
    list_id=$(echo "${response}" | jq -r ".result[] | select(.name==\"$ip_list_name\") | .id")

    #Check if list ID is empty
    if [ -z "$list_id" ]; then
        echo "Error: Could not find IP list with name ${ip_list_name}."
        exit 1
    fi
}

# Function to add IP to List
add_ip() {
    ip=$1
    list_id=$2
    account_id=$3

    # Make POST request to add IP to list
    url="https://api.cloudflare.com/client/v4/accounts/$account_id/rules/lists/$list_id/items"
    data=$(jq -n --arg ip "${ip}" '[{ip: $ip}]')
    response=$(curl -s -X POST "$url" \
      -H "Authorization: Bearer ${CF_API_TOKEN}" \
      -H "Content-Type: application/json" \
      -d "$data")

    # Verify that the request was successful
    success=$(echo "${response}" | jq -r '.success')
    if [ "${success}" != "true" ]; then
        echo "Error: Failed to add IP ${ip} to ${ip_list_name} IP List."
        echo "Response: ${response}"
        exit 1
    fi

    # Return success message
    echo "IP address ${ip} has been add to the ${ip_list_name} IP List"

}

# Function to remove IP from List
remove_ip() {
    ip=$1
    list_id=$2
    account_id=$3

    # Get content of the list
    url="https://api.cloudflare.com/client/v4/accounts/${account_id}/rules/lists/${list_id}/items"
    response=$(curl -s -X GET "${url}" \
      -H "Authorization: Bearer ${CF_API_TOKEN}" \
      -H "Content-Type: application/json")

    # Verify that the request was successful
    success=$(echo "${response}" | jq -r '.success')
    if [ "${success}" != "true" ]; then
        echo "Error: Failed to get content of ${ip_list_name} IP List."
        echo "Response: ${response}"
        exit 1
    fi   

    # Edit list to remove IP
    updated_list=$(echo "$response" | jq -c ".result |= map(select(.ip != \"${ip}\") | {ip: .ip})" | jq .result)

    # Make PUT request to update list
    response=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/accounts/${account_id}/rules/lists/${list_id}/items" \
      -H "Authorization: Bearer ${CF_API_TOKEN}" \
      -H "Content-Type: application/json" \
      -d "${updated_list}")

    # Verify that the request was successful
    success=$(echo "${response}" | jq -r '.success')   
    if [ "${success}" != "true" ]; then
        echo "Error: Failed to remove IP ${ip} from ${ip_list_name} IP List."
        echo "Response: ${response}"
        exit 1
    fi

    # Return success message
    echo "IP address ${ip} has been removed from the ${ip_list_name} IP List"
}

# Check if environment variable is set
if [ -z "${CF_API_TOKEN}" ]; then
    echo "Error: CF_API_TOKEN environment variable must be set"
    exit 1
fi

# Initialize variables
ip_list_name=""
action=""
ip=""

# Parse command line flags
while getopts "l:a:i:" flag
do
    case "${flag}" in
        a) action=${OPTARG};;
        i) ip=${OPTARG};;
        l) list=${OPTARG};;
        *) usage;;
    esac
done
ip_list_name=$list

# Check if all flags are set
if [ -z "${action}" ] || [ -z "${ip}" ] || [ -z "${list}" ]; then
    echo "Error: Missing required arguments"
    usage
fi

# Check if IP is valid
if ! validate_ip "${ip}"; then
    echo "Error: Invalid IP address"
    exit 1
fi

# Check if action is valid
if [ "${action}" != "add" ] && [ "${action}" != "remove" ]; then
    echo "Error: Invalid action. action should be either 'add' or 'remove'"
    exit 1
fi

# Set account ID
unset account_id
set_account_id
if [ -z "${account_id}" ]; then
    echo "Error: Failed to get account ID."
    exit 1
fi

# Set list ID
unset list_id
set_list_id "${account_id}"
if [ -z "${list_id}" ]; then
    echo "Error: Failed to get or create list."
    exit 1
fi

# # Add or Remove IP
"${action}"_ip "${ip}" "${list_id}" "${account_id}"

